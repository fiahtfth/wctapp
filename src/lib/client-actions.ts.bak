import { 
  addQuestionToCart as serverAddQuestionToCart, 
  getCartItems as serverGetCartItems,
  removeFromCart as serverRemoveFromCart 
} from './server-actions';
import { useCartStore } from '@/store/cartStore';
import { v4 as uuidv4 } from 'uuid';
import { getTestId } from './actions';
import { z } from 'zod';
import { Question, CartQuestion, toCartQuestion } from '@/types/question';
import { getSupabaseBrowserClient } from '@/lib/database/supabaseClient';
import getSupabaseClient from '@/lib/database/supabaseClient';
import { Database } from '@/types/supabase';

// Helper functions
function getToken(): string | null {
  if (typeof window === 'undefined') return null;
  return localStorage.getItem('token');
}

function getBaseUrl(): string {
  return process.env.NEXT_PUBLIC_API_URL || '';
}

// Flexible function to get difficulty level
function getDifficultyLevel(question: Question | CartQuestion): string {
  // Safe access with fallback
  return question.difficulty || 'Medium';
}

// Flexible function to get question type
function getQuestionType(question: Question | CartQuestion): string {
  // Safe access with fallback
  return (question as any).type || 'Multiple Choice';
}

export async function removeQuestionFromCart(
  questionOrCartItemId: number | string, 
  testId?: string
): Promise<{ 
  message: string; 
  success: boolean 
}> {
  try {
    // Get the singleton Supabase client
    const supabase = getSupabaseBrowserClient();
    if (!supabase) {
      return { success: false, message: 'Failed to initialize Supabase client' };
    }

    // Validate inputs
    if (!questionOrCartItemId) {
      return { success: false, message: 'Question ID is required' };
    }

    // Check if user is authenticated
    const session = await supabase.auth.getSession();
    if (!session.data.session) {
      // User is not authenticated, remove from local storage only
      console.log('User not authenticated, removing from local storage only');
      
      // Remove the question ID from local storage
      const cartItems = JSON.parse(localStorage.getItem('localCart') || '[]');
      const updatedItems = cartItems.filter((id: string | number) => 
        String(id) !== String(questionOrCartItemId)
      );
      localStorage.setItem('localCart', JSON.stringify(updatedItems));
      
      return { 
        success: true, 
        message: 'Question removed from local cart successfully' 
      };
    }

    if (!testId) {
      // Try to get the test ID
      try {
        testId = await getTestId();
      } catch (error) {
        console.error('Error getting test ID:', error);
        return { success: false, message: 'Failed to get test ID' };
      }
    }

    // First try to find the cart for this test
    const { data: cart, error: cartError } = await supabase
      .from('carts')
      .select('id')
      .eq('test_id', testId)
      .maybeSingle();

    if (cartError || !cart) {
      console.error('Error finding cart:', cartError);
      return { success: false, message: 'Cart not found' };
    }

    // Now delete the cart item
    const numericId = typeof questionOrCartItemId === 'string' 
      ? Number(questionOrCartItemId) 
      : questionOrCartItemId;
    
    const { error: deleteError } = await supabase
      .from('cart_items')
      .delete()
      .eq('cart_id', cart.id)
      .eq('question_id', numericId);
    
    if (deleteError) {
      console.error('Error removing question from cart:', deleteError);
      return { success: false, message: 'Failed to remove question from cart' };
    }
    
    return { success: true, message: 'Question removed from cart successfully' };
  } catch (error) {
    console.error('Error removing question from cart:', error);
    
    // If there's an error, try to remove from local storage as a fallback
    try {
      const cartItems = JSON.parse(localStorage.getItem('localCart') || '[]');
      const updatedItems = cartItems.filter((id: string | number) => 
        String(id) !== String(questionOrCartItemId)
      );
      localStorage.setItem('localCart', JSON.stringify(updatedItems));
      
      return { 
        success: true, 
        message: 'Question removed from local cart successfully' 
      };
    } catch (localStorageError) {
      return { 
        success: false, 
        message: error instanceof Error ? error.message : 'Unknown error removing question from cart'
      };
    }
  }
}

export async function removeQuestionFromTest({ questionId, testId }: { questionId: number, testId: string }) {
  try {
    const token = getToken();
    if (!token) {
      throw new Error('Authentication required');
    }

    const response = await fetch(`${getBaseUrl()}/api/tests/${testId}/questions/${questionId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to remove question');
    }

    return { success: true };
  } catch (error) {
    console.error('Error removing question from test:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
}

export async function fetchCartItems(testId?: string) {
  try {
    const token = getToken();
    if (!token) {
      throw new Error('Authentication required');
    }

    let url = `${getBaseUrl()}/api/cart`;
    if (testId) {
      url += `?testId=${encodeURIComponent(testId)}`;
    }

    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to fetch cart items');
    }

    const data = await response.json();
    return data.items || [];
  } catch (error) {
    console.error('Error fetching cart items:', error);
    return [];
  }
}

// Type conversion function to ensure string type
function ensureStringType(value: string | number): string {
  return typeof value === 'string' ? value : value.toString();
}

interface CartQuestionWithId extends CartQuestion {
  cartItemId: number;
}

export async function getCartQuestions(testId: string): Promise<CartQuestion[]> {
  try {
    // Get the Supabase client
    const supabase = getSupabaseClient();
    if (!supabase) {
      throw new Error('Failed to initialize Supabase client');
    }

    const { data, error } = await supabase
      .from('cart_questions')
      .select(`
        id,
        question_id,
        test_id,
        quantity,
        questions (
          id,
          title,
          content,
          difficulty,
          type,
          options,
          correct_answer,
          explanation,
          tags,
          created_at,
          updated_at,
          subject,
          topic,
          faculty_approved
        )
      `)
      .eq('test_id', testId);

    if (error) {
      console.error('Error fetching cart questions:', error);
      return [];
    }

    if (!data || data.length === 0) {
      return [];
    }

    // Transform the data to match the CartQuestion interface
    return data.map(item => {
      const question = item.questions as any;
      return {
        cartItemId: item.id,
        id: question.id,
        Question: question.content || '',
        Subject: question.subject || '',
        Topic: question.topic || '',
        QuestionType: question.type === 'Multiple Choice' ? 'Objective' : 'Subjective',
        FacultyApproved: question.faculty_approved || false,
        quantity: item.quantity || 1,
        difficulty: question.difficulty as 'Easy' | 'Medium' | 'Hard',
        tags: question.tags,
        module: question.module,
        sub_topic: question.sub_topic,
        marks: question.marks
      };
    });
  } catch (error) {
    console.error('Error fetching cart questions:', error);
    return [];
  }
}

export async function getQuestionsFromCart(
  testId: string, 
  userId: number
): Promise<CartQuestion[]> {
  try {
    // Get the singleton Supabase client
    const supabase = getSupabaseBrowserClient();
    if (!supabase) {
      throw new Error('Failed to initialize Supabase client');
    }

    // Ensure testId is a string
    const testIdStr = ensureStringType(testId);

    // Get questions from cart
    const { data, error } = await supabase
      .from('cart_questions')
      .select(`
        id,
        question_id,
        quantity,
        questions (*)
      `)
      .eq('test_id', testIdStr);

    if (error) {
      console.error('Error fetching questions from cart:', error);
      return [];
    }

    if (!data || data.length === 0) {
      return [];
    }

    // Transform to CartQuestion format
    return data.map(item => {
      const question = item.questions as unknown as Question;
      // Create a CartQuestion with the additional properties
      return {
        id: question.id,
        text: question.text || '',
        answer: question.answer || '',
        subject: question.subject || '',
        topic: question.topic || '',
        questionType: question.questionType || 'Objective',
        difficulty: question.difficulty || 'Medium',
        module: question.module || '',
        sub_topic: question.sub_topic || '',
        marks: question.marks || 0,
        tags: question.tags || [],
        // CartQuestion specific fields
        Question: question.text || '',
        Subject: question.subject || '',
        Topic: question.topic || '',
        FacultyApproved: false,
        QuestionType: question.questionType || 'Objective',
        // Additional fields from cart
        cartItemId: item.id,
        quantity: item.quantity || 1
      } as CartQuestion;
    });
  } catch (error) {
    console.error('Error fetching questions from cart:', error);
    return [];
  }
}

export async function addQuestionToCart(
  questionId: number | string, 
  testId?: string
): Promise<{ 
  message: string; 
  cartItemId?: number; 
  success: boolean;
}> {
  try {
    // Get the singleton Supabase client
    const supabase = getSupabaseBrowserClient();
    if (!supabase) {
      return { success: false, message: 'Failed to initialize Supabase client' };
    }

    // Validate inputs
    if (!questionId) {
      return { success: false, message: 'Question ID is required' };
    }

    // If no testId provided, try to get one
    if (!testId) {
      try {
        testId = await getTestId();
      } catch (error) {
        console.error('Error getting test ID:', error);
        return { success: false, message: 'Failed to get test ID' };
      }
    }

    // Check if user is authenticated
    const session = await supabase.auth.getSession();
    if (!session.data.session) {
      // User is not authenticated, store in local storage only
      console.log('User not authenticated, storing in local storage only');
      
      // Store the question ID in local storage
      const cartItems = JSON.parse(localStorage.getItem('localCart') || '[]');
      if (!cartItems.includes(questionId)) {
        cartItems.push(questionId);
        localStorage.setItem('localCart', JSON.stringify(cartItems));
      }
      
      return { 
        success: true, 
        message: 'Question added to local cart successfully'
      };
    }

    // First, find the cart for this test
    const { data: cart, error: cartError } = await supabase
      .from('carts')
      .select('id')
      .eq('test_id', testId)
      .maybeSingle();

    let cartId: number;
    
    if (cartError || !cart) {
      // Create a new cart
      const { data: newCart, error: createCartError } = await supabase
        .from('carts')
        .insert({
          test_id: testId,
          is_draft: true
        })
        .select('id')
        .single();
      
      if (createCartError || !newCart) {
        console.error('Error creating cart:', createCartError);
        return { success: false, message: 'Failed to create cart' };
      }
      
      cartId = newCart.id;
    } else {
      cartId = cart.id;
    }

    // Check if question is already in cart
    const { data: existingItem, error: checkError } = await supabase
      .from('cart_items')
      .select('id')
      .eq('cart_id', cartId)
      .eq('question_id', typeof questionId === 'string' ? parseInt(questionId, 10) : questionId)
      .single();

    if (!checkError && existingItem) {
      return { 
        success: true, 
        message: 'Question already in cart',
        cartItemId: existingItem.id
      };
    }

    // Add question to cart
    const { data: newItem, error: addError } = await supabase
      .from('cart_items')
      .insert({
        cart_id: cartId,
        question_id: typeof questionId === 'string' ? parseInt(questionId, 10) : questionId
      })
      .select('id')
      .single();

    if (addError || !newItem) {
      console.error('Error adding question to cart:', addError);
      return { success: false, message: 'Failed to add question to cart' };
    }

    return { 
      success: true, 
      message: 'Question added to cart successfully',
      cartItemId: newItem.id
    };
  } catch (error) {
    console.error('Error adding question to cart:', error);
    
    // If there's an error, try to store in local storage as a fallback
    try {
      const cartItems = JSON.parse(localStorage.getItem('localCart') || '[]');
      if (!cartItems.includes(questionId)) {
        cartItems.push(questionId);
        localStorage.setItem('localCart', JSON.stringify(cartItems));
      }
      
      return { 
        success: true, 
        message: 'Question added to local cart successfully'
      };
    } catch (localStorageError) {
      return { 
        success: false, 
        message: error instanceof Error ? error.message : 'Unknown error adding question to cart'
      };
    }
  }
}

export async function updateQuestionQuantity(
  cartItemId: number, 
  quantity: number
): Promise<{ 
  message: string; 
  success: boolean 
}> {
  try {
    // Get the singleton Supabase client
    const supabase = getSupabaseBrowserClient();
    if (!supabase) {
      throw new Error('Failed to initialize Supabase client');
    }

    // Validate inputs
    if (!cartItemId) {
      return { success: false, message: 'Cart item ID is required' };
    }

    if (quantity < 1) {
      return { success: false, message: 'Quantity must be at least 1' };
    }

    // Update quantity
    const { error } = await supabase
      .from('cart_questions')
      .update({ quantity })
      .eq('id', cartItemId);

    if (error) {
      console.error('Error updating question quantity:', error);
      return { success: false, message: 'Failed to update quantity' };
    }

    return { success: true, message: 'Quantity updated successfully' };
  } catch (error) {
    console.error('Unexpected error updating question quantity:', error);
    return { success: false, message: 'An unexpected error occurred' };
  }
}

export async function saveDraftCart(
  userId: number | string, 
  testName: string, 
  batch: string, 
  date: string, 
  questionIds: number[],
  existingTestId?: string
) {
  try {
    console.log('Saving draft cart:', { userId, testName, batch, date, questionIds, existingTestId });
    
    const baseUrl = getBaseUrl();
    const response = await fetch(`${baseUrl}/api/cart/draft`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        userId, 
        testName, 
        batch, 
        date, 
        questionIds,
        existingTestId
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to save draft cart');
    }
    
    const result = await response.json();
    return result.testId;
  } catch (error) {
    console.error('Error saving draft cart:', error);
    throw error;
  }
}

export async function getQuestionById(questionId: number) {
  try {
    const token = getToken();
    if (!token) {
      throw new Error('Authentication required');
    }

    const response = await fetch(`${getBaseUrl()}/api/questions/${questionId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to fetch question details');
    }

    const data = await response.json();
    return data.question;
  } catch (error) {
    console.error('Error fetching question details:', error);
    return null;
  }
}

export async function clearCart() {
  try {
    // Get the singleton Supabase client
    const supabase = getSupabaseBrowserClient();
    if (!supabase) {
      throw new Error('Failed to initialize Supabase client');
    }
    
    // Get the cart ID from local storage or other source
    const testId = localStorage.getItem('currentTestId');
    if (!testId) {
      return { success: false, message: 'No active cart found' };
    }
    
    // Delete all items from the cart
    const { error } = await supabase
      .from('cart_questions')
      .delete()
      .eq('test_id', testId);
    
    if (error) {
      console.error('Error clearing cart:', error);
      return { success: false, message: 'Failed to clear cart' };
    }
    
    return { success: true, message: 'Cart cleared successfully' };
  } catch (error) {
    console.error('Unexpected error clearing cart:', error);
    return { success: false, message: 'An unexpected error occurred' };
  }
}

/**
 * Get cart items from local storage
 * This is used as a fallback when the user is not authenticated
 */
export async function getLocalCartItems(): Promise<CartQuestion[]> {
  try {
    if (typeof window === 'undefined') return [];
    
    // Get question IDs from local storage
    const localCartItems = JSON.parse(localStorage.getItem('localCart') || '[]');
    
    if (!localCartItems || localCartItems.length === 0) {
      return [];
    }
    
    // For local storage, we just have IDs, so we need to fetch the questions
    // from the local cart store
    const cartStore = useCartStore.getState();
    const storeQuestions = cartStore.questions;
    
    // Filter store questions to only include those in the local cart
    const localQuestions = storeQuestions.filter(q => 
      localCartItems.includes(q.id) || 
      localCartItems.includes(String(q.id))
    );
    
    // If we have questions in the store, return them
    if (localQuestions.length > 0) {
      return localQuestions;
    }
    
    // Otherwise, create placeholder questions with just the ID
    return localCartItems.map((id: string | number) => ({
      id: typeof id === 'string' ? parseInt(id, 10) : id,
      text: `Question ${id}`,
      answer: '',
      subject: '',
      topic: '',
      questionType: 'Objective',
      difficulty: 'Medium',
      module: '',
      sub_topic: '',
      marks: 0,
      tags: [],
      Question: `Question ${id}`,
      Subject: '',
      Topic: '',
      FacultyApproved: false,
      QuestionType: 'Objective'
    }));
  } catch (error) {
    console.error('Error getting local cart items:', error);
    return [];
  }
